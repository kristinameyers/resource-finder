
let's make changes to the accessibility features on the "Settings" screen

Accessibility Instructions for Replit


1. Font Scaling (Small, Medium, Large)
Store user selection in global state (e.g., React Context or Redux).
Globally scale all text using accessibility-compatible units (like rem or by applying a font size scaling function).
Example (React Native Style):
js
const getFontSize = (baseSize, scale) => {
  switch (scale) {
    case 'small': return baseSize * 0.85;
    case 'large': return baseSize * 1.25;
    default: return baseSize;
  }
};
const styles = {
  text: {
    fontSize: getFontSize(16, fontScale), // fontScale = 'small', 'medium', or 'large'
  }
};

Update all Text components to use the current global font size.


2. Display Mode ("Default" vs "High Contrast")

When "High Contrast" is selected:
Use a theme with high color contrastâ€”e.g., dark text on light backgrounds, highlight colors for key UI components.
Increase color separation between text, backgrounds, icons, and controls.
Example (CSS/Style):
js
// Theme context
const theme = mode === 'high-contrast'
  ? { background: "#fff", text: "#000", primary: "#000", accent: "#FFD700" }
  : { background: "#f7f7f7", text: "#222", primary: "#256BAE", accent: "#74a6c7" };

Apply theme dynamically across all screens.


3. Reduce Motion
When "Reduce Motion" is enabled
Disable or minimize non-essential animations (transitions, parallax, fades, movements).
Switch to instant changes or static content for navigation and UI actions.
Use a global flag (e.g., reduceMotion) and conditionally trigger reduced animation durations or no animation at all:
js
if (reduceMotion) {
  animationDuration = 0;
} else {
  animationDuration = 300; // ms
}

Respect system "Reduce Motion" settings if possible (on iOS/Android).


4. Enable Screen Reader Mode
Enable accessibility properties when Screen Reader Mode selected.
Ensure all UI elements (buttons, inputs, images, icons) have descriptive accessibilityLabel, accessibilityRole, and accessible text.
Add focus outlines, ensure navigation is logical/tabbable, and structure content with proper accessibility hierarchy.
Example (React Native):
jsx
<TouchableOpacity
  accessibilityLabel="Search resources"
  accessibilityRole="button"
>
  <Text>Search</Text>
</TouchableOpacity>

Test with screen readers (VoiceOver, TalkBack) for clarity and completeness.


5. Enable Haptic Feedback
Provide tactile feedback for actions when Haptic Feedback enabled.
On supported platforms/devices:
When the user taps buttons, completes actions, or navigates, trigger appropriate haptic vibration/feedback.
Example (React Native):
js
import * as Haptics from 'expo-haptics';
function onPress() {
  if (hapticsEnabled) Haptics.selectionAsync();
  // ...rest of action
}

Ensure haptic feedback is optional and can be toggled in settings.


Summary for Replit
Font scaling: Dynamically adjust global font size for text elements by user selection.
Contrast mode: Switch color themes and component styles for more readable/high-contrast UI.
Reduce motion: Disable non-essential movement/animation for those with motion sensitivity.
Screen reader mode: Add semantic labels/roles and ensure navigation/focus support for screen readers.
Haptics: Trigger tactile feedback for interactive events when enabled.


Apply these instructions in your app so users can customize accessibility features for a smoother, more inclusive experience.