### Code Analysis: Key Problems Preventing Resource Display

1. **Resource Fetch Query Error:**
   - The fetch is via `/api/resources` with query parameters like `categoryId`, `keyword`, etc., but according to your project's requirements, **resources must be fetched using the 211 National API** and **taxonomy code as keyword**, not just `categoryId`.

2. **Filtering Approach:**
   - The code currently filters results by hardcoded string matches for Santa Barbara County, rather than via the API's built-in county/taxonomy/location filters.
   - If `filterSantaBarbaraAndSort` relies only on post-fetch filtering, but the API isn't providing Santa Barbara resources because the taxonomy code (as keyword) isn't used, the result set could be empty.

3. **Distance Calculation:**
   - The function for distance calculation is decoupled. If `userLocation` (zipCode) isn't correctly mapped to lat/lon and the API isn't receiving it as a `referenceLocation`, proximity sorting and distance are broken.

4. **Missing Taxonomy Parameter Handling:**
   - The resourceParams in your API request do not set a taxonomy code as keyword (required for 211 search).

***

## Solution: Update Code to Use 211 National API Parameters and Taxonomy-as-Keyword

### Instructions for Replit

- Change resource fetching so that it uses the same request body/parameters you have implemented for the 211 National API previously:
  - **Always send taxonomy codes in the payload as the main search/filter.**
  - Map `categoryId` and `subcategoryId` to their taxonomy code, and send as `"taxonomyCodes"` in the request.
  - Required fields: `term`, `taxonomyCodes`, `referenceLocations`, `sort`, etc.
- Send the user location as `{latitude, longitude}` (not just zip), when available, in `referenceLocations`.
- Allow sort by `"Proximity"` if location is set, else `"Alphabetical"`.
- Remove post-fetch string filtering for Santa Barbara. Let the API handle county/taxonomy matching.
- Preserve new UI.
- Restore distance display and correct pagination.

***

### Example Updated Resource Fetch Logic (React Query)

```js
// You may want to move this into a helper/service file
function getTaxonomyCodes(categoryId, subcategoryId, categories, subcategories) {
  // Assume your categories/subcategories have taxonomyCode fields
  if (subcategoryId) {
    const subCat = subcategories.find((s) => s.id === subcategoryId);
    return subCat ? [subCat.taxonomyCode] : [];
  }
  if (categoryId) {
    const cat = categories.find((c) => c.id === categoryId);
    return cat ? [cat.taxonomyCode] : [];
  }
  return [];
}

function useResources211NationalApi({
  categoryId,
  subcategoryId,
  keyword,
  userLocation,
  sortByLocation,
  categories,
  subcategories,
  page,
}) {
  return useQuery({
    queryKey: [
      "resources",
      categoryId,
      subcategoryId,
      keyword,
      userLocation,
      sortByLocation,
      page
    ],
    enabled: !!(categoryId || keyword),
    queryFn: async () => {
      const taxonomyCodes = getTaxonomyCodes(categoryId, subcategoryId, categories, subcategories);
      const referenceLocations = userLocation ? [{ latitude: userLocation.lat, longitude: userLocation.lng }] : [];
      const apiBody = {
        term: keyword || "*",
        taxonomyCodes: taxonomyCodes,
        taxonomyOperator: "AND",
        taxonomyIncludeChildren: true,
        referenceLocations: referenceLocations,
        locationFilter: "serving",
        resourceType: "Program",
        sort: sortByLocation ? "Proximity" : "Alphabetical",
        skip: page ? 20 * page : 0,
        take: 20,
      };
      const resp = await fetch("https://api.211.org/vX/resource/Search", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${process.env.REACT_APP_211_API_TOKEN}`,
          "Content-Type": "application/json; charset=utf-8",
        },
        body: JSON.stringify(apiBody),
      });
      const json = await resp.json();
      // Map distance and address display, etc.
      return json.results || [];
    },
  });
}
```

**Usage in your page:**

Replace the existing resource fetch logic with:

```js
const {
  data: resourcesData,
  isLoading,
} = useResources211NationalApi({
  categoryId,
  subcategoryId: selectedSubcategory,
  keyword,
  userLocation: getLatLngFromZip(userLocation), // helper function to convert zip to lat/lon (use your existing zip → lat/lon plugin)
  sortByLocation: !!userLocation,
  categories,
  subcategories,  
  page, // add pagination logic as in your previous code
});
```

Replace previous filtering/post-processing.  
Display `distanceMiles` if returned from API.

***

## Additional Notes
- **Taxonomy Codes:** You must have mappings in your category/subcategory resources with the corresponding 211 taxonomy codes. This is a schema/data requirement.
- **Location Conversion:** If user only provides zip, use a library or table to convert zip to latitude/longitude before sending to API.
- **No String Filtering:** Don't rely on post-fetch filtering by address/city for county display—let the API return the right resources using the taxonomy code and location.

***

## Summary of Critical Fixes

- Use **taxonomy code as keyword** (via `taxonomyCodes`) in all resource API searches.
- Use the established **211 National API parameters and endpoints**, do not alter or substitute them.
- Restore **distance calculation** by sending user location as lat/lon to the API, enabling `"Proximity"` sort.
- Remove manual string filtering for Santa Barbara County in favor of correct taxonomy/location-based API filtering.
- Preserve UI changes, but ensure core resource listing features match the 211 workflow.

**This will restore correct resource display, distance sorting/filtering, and robust feature compatibility with 211 National’s production API.**