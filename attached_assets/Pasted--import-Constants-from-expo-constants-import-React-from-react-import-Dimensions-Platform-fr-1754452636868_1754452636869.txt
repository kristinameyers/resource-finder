
import Constants from "expo-constants";
import React from "react";
import {Dimensions, Platform} from "react-native";
import {EventRegister} from "react-native-event-listeners";
import {
    Actionsheet,
    Box,
    Button,
    Center,
    FlatList,
    HStack,
    Icon,
    Pressable,
    ScrollView,
    Skeleton,
    Spacer,
    Text,
    useDisclose,
    View,
    VStack
} from "native-base";
import {MaterialIcons} from "@expo/vector-icons";
import {useTranslation} from "react-i18next";
import analytics from "@react-native-firebase/analytics";

// components
import SearchBar from "../components/SearchBar";

// resources
import {
    mainCategoriesName,
    specialTermsForCategory,
    subCategoriesList,
    subCategoriesListYouth
} from "../resources/BaseData";

// services
import StaticDataService from "../service/StaticDataService";

// local variables
let alreadySearching = null;

export default function ResultPage({navigation, route}) {
    const {t} = useTranslation();

    const subCategoriesListLocal = Constants.expoConfig.extra.isGeneralApp ? subCategoriesList : subCategoriesListYouth;

    const appWidth = Dimensions.get('window').width;
    const fromLocationPage = !!(route && route.params && route.params.fromLocationPage);
    const postParams = (route && route.params) ? route.params : {};
    const {isOpen, onOpen, onClose} = useDisclose();
    const [subCategory, setSubCategory] = React.useState(null);
    const [searchResultDataLocal, setSearchResultDataLocal] = React.useState([]);
    const [sortByLocation, setSortByLocation] = React.useState(false);
    const [loading, setLoading] = React.useState(true);
    const [page, setPage] = React.useState(0);
    const [loadMoreAvailable, setLoadMoreAvailable] = React.useState(false);
    const [loadMoreLoading, setLoadMoreLoading] = React.useState(false);
    const showSubCatSelector = (StaticDataService.mainCategory.code && subCategoriesListLocal[StaticDataService.mainCategory.code]);
    const sortByLocationEnabled = (sortByLocation && StaticDataService.location && StaticDataService.location.lat);
    const showSearchbar = StaticDataService.search || (StaticDataService.mainCategory.code && specialTermsForCategory[StaticDataService.mainCategory.code]);

    const filterName = (item, nameType) => {
        let nameToReturn = '';

        if (nameType === 'name') {
            item['resource']['names'].forEach((name) => {
                if (name['purpose'] === 'Primary') {
                    nameToReturn = name.value;
                }
            });
        } else if (nameType === 'related') {
            item['resource']['related'].forEach((name) => {
                if (name['type'] === 'Agency') {
                    nameToReturn = name.name;
                }
            });
        }

        return nameToReturn;
    };

    const filterCatTitle = (category) => {
        if (mainCategoriesName[category.code] && t(mainCategoriesName[category.code])) {
            return t(mainCategoriesName[category.code]);
        }
        if (category.name && t(category.name)) {
            return t(category.name);
        } else {
            return category.name;
        }
    };

    const searchRecords = () => {
        if (page) {
            setLoadMoreLoading(true);
        } else {
            setLoading(true);
        }

        let search = StaticDataService.search;
        let category = StaticDataService.mainCategory.code ?? '';
        let take = 20;

        if (category && specialTermsForCategory[category]) {
            search = specialTermsForCategory[category];
            category = '';
        }
        if (search) {
            take = 10;
        }

        let apiBody = {
            'term': '*',
            'taxonomyCodes': [],
            'referenceLocations': [{
                'latitude': StaticDataService.location.lat,
                'longitude': StaticDataService.location.lng
            }],
            'locationFilter': 'serving',
            'resourceType': 'Program',
            'sort': 'Alphabetical',
            'skip': page ? take * page : 0,
            'take': take
        };

        if (search) {
            apiBody.term = search;
        } else {
            apiBody.term = '*';
            apiBody.taxonomyCodes = [subCategory ? subCategory : (category ? category : '*')];
            apiBody.taxonomyOperator = 'AND';
            apiBody.taxonomyIncludeChildren = true;
        }

        if (sortByLocation) {
            apiBody.sort = 'Proximity';
        }

        fetch('https://api.icarol.com/v1/resource/Search', {
            method: 'POST',
            headers: new Headers({
                'Authorization': 'Bearer ' + process.env.EXPO_PUBLIC_ICAROL_API_TOKEN,
                'Content-Type': 'application/json; charset=utf-8'
            }),
            credentials: 'include',
            body: JSON.stringify(apiBody),
        })
            .then((resp) => resp.json())
            .then((json) => {
                setLoadMoreAvailable(
                    !!(
                        json['totalResultCount']
                        && json['totalResultCount'] > ((page + 1) * take)
                    )
                );

                if (json['results']) {
                    if (page) {
                        setSearchResultDataLocal(searchResultDataLocal.concat(json['results']));
                    } else {
                        setSearchResultDataLocal(json['results']);
                    }
                }
            })
            .catch((error) => {
                console.error(error)
            })
            .finally(() => {
                if (page) {
                    setLoadMoreLoading(false);
                } else {
                    setLoading(false);
                }
            });
    };

    const initSearch = () => {
        if (alreadySearching) {
            clearTimeout(alreadySearching);
            alreadySearching = null;
        }

        alreadySearching = setTimeout(() => {
            searchRecords();
        }, 100);
    };

    const startNewSearchBySubCat = (subCat) => {
        setPage(0);
        setSubCategory(subCat);
        onClose();
        analytics().logEvent('click', {
            app_event: (Constants.expoConfig.extra.isGeneralApp ? 'App - ' : 'Youth App - ') + filterCatTitle({code: subCat})
        });
    };
    const sortByLocationTrigger = () => {
        setPage(0);
        if (sortByLocation) {
            setSortByLocation(false);
        } else {
            if (StaticDataService.location.lat) {
                setSortByLocation(true);
            } else {
                navigation.navigate('set-location', {
                    fromResultPage: true,
                    subCategory
                });
            }
        }
    };
    
    const openDetailPage = (listing) => {
        navigation.navigate('listing-detail', {listing});
    };

    React.useEffect(() => {
        initSearch();
    }, [StaticDataService.search, StaticDataService.mainCategory, subCategory, sortByLocation, page]);

    React.useEffect(() => {
        return navigation.addListener('focus', () => {
            if (fromLocationPage) {
                setSubCategory(postParams['subCategory'] ?? subCategory);
                setSortByLocation(postParams['sortByLocation'] ?? sortByLocation);
            }
        });
    }, [navigation]);

    React.useEffect(() => {
        let listenerSearch = EventRegister.addEventListener('DrawerSearchUpdated', () => {
            setSortByLocation(false);
            initSearch();
        });

        return () => {
            if (typeof listenerSearch === 'string') {
                EventRegister.removeEventListener(listenerSearch);
            }
        }
    }, []);

    return (
        <View
            flex={1}
            pt="4"
        >
            <Box flex={1} justifyContent="flex-start">
                <HStack
                    space={1}
                    justifyContent="space-between"
                    width="90%"
                    maxW="700"
                    mx="auto"
                    height="58px"
                    maxH="80px"
                >
                    {
                        showSubCatSelector && <Box width="49%">
                            <Button
                                variant="subtle"
                                size="lg"
                                bgColor={sortByLocationEnabled ? 'yellow.400' : 'blue.500'}
                                borderRadius="full"
                                _pressed={{
                                    bgColor: sortByLocationEnabled ? 'yellow.500' : 'blue.600'
                                }}
                                onPress={onOpen}
                            >
                                <HStack justifyContent="space-between" alignContent="center">
                                    <Text
                                        width={appWidth / 3}
                                        maxW="250"
                                        color={sortByLocationEnabled ? 'black' : 'white'}
                                        fontSize="16"
                                        numberOfLines={1}
                                        pl="2"
                                        pr="0"
                                    >{subCategory ? filterCatTitle({code: subCategory}) : t('searchSubcategories')}</Text>
                                    <Icon
                                        size={6}
                                        as={MaterialIcons}
                                        name="keyboard-arrow-down"
                                        ml="auto"
                                        color={sortByLocationEnabled ? 'black' : 'white'}
                                    />
                                </HStack>
                            </Button>
                            <Actionsheet isOpen={isOpen} onClose={onClose}>
                                <Actionsheet.Content>
                                    <ScrollView
                                        showsVerticalScrollIndicator={false}
                                        showsHorizontalScrollIndicator={false}
                                        width="100%"
                                    >
                                        {
                                            subCategoriesListLocal[StaticDataService.mainCategory.code].map((subCat, subCatKey) => {
                                                return <Actionsheet.Item
                                                    key={"sub-cat-key-" + subCatKey}
                                                    borderRadius="full"
                                                    _pressed={{
                                                        bgColor: "blue.200"
                                                    }}
                                                    onPress={() => {
                                                        startNewSearchBySubCat(subCat);
                                                    }}
                                                >{filterCatTitle({code: subCat})}</Actionsheet.Item>
                                            })
                                        }
                                    </ScrollView>
                                </Actionsheet.Content>
                            </Actionsheet>
                        </Box>
                    }
                    <Box width={!showSubCatSelector ? '100%' : '49%'}>
                        <Button
                            variant="subtle"
                            size="lg"
                            bgColor={sortByLocationEnabled ? 'blue.500' : 'yellow.400'}
                            borderRadius="full"
                            rightIcon={
                                <Icon
                                    size={4}
                                    as={MaterialIcons}
                                    name="near-me"
                                    ml="auto"
                                    color={sortByLocationEnabled ? 'white' : 'black'}
                                />
                            }
                            _text={{
                                color: sortByLocationEnabled ? 'white' : 'black',
                                fontSize: 16,
                                numberOfLines: 1,
                                paddingLeft: 2,
                                paddingRight: 5,
                                justifyContent: "space-between"
                            }}
                            _pressed={{
                                bgColor: sortByLocationEnabled ? 'blue.600' : 'yellow.500'
                            }}
                            onPress={sortByLocationTrigger}
                        >{t('sortDistance')}</Button>
                    </Box>
                </HStack>
                {
                    showSearchbar && <Box flex={1} width="90%" maxW="700" maxH="60px" mx="auto" mb={0.9}>
                        <SearchBar initValue={StaticDataService.search ?? ''} onEnterSearch={(text) => {
                            StaticDataService.search = text;
                            StaticDataService.mainCategory = {};
                            navigation.push('result-page');
                        }}/>
                    </Box>
                }
                {
                    loading ? <Box flex={1} width="90%" maxW="700" mx="auto" pb="4" mt={Platform.OS === 'web' ? 4 : 0}>
                        {
                            Array.range(0, 10).map((num) => (
                                <Box
                                    key={"box-skeleton-result-page-" + num}
                                    borderWidth="1"
                                    borderColor="muted.300"
                                    borderRadius="20"
                                    p="4"
                                    mb="2"
                                    style={{
                                        width: "100%",
                                        backgroundColor: "white"
                                    }}
                                >
                                    <Skeleton.Text lines={sortByLocationEnabled ? 3 : 2}/>
                                </Box>
                            ))
                        }
                    </Box> : <Box flex={1} width="90%" maxW="700" mx="auto" mt={Platform.OS === 'web' ? 4 : 0}>
                        {
                            searchResultDataLocal.length ? <FlatList
                                flex={1}
                                showsVerticalScrollIndicator={false}
                                showsHorizontalScrollIndicator={false}
                                data={searchResultDataLocal}
                                keyExtractor={item => item.resource.id + '-' + Math.floor(Math.random() * 100000001)}
                                renderItem={(itemProps) => {
                                    return <>
                                        <Pressable
                                            width="100%"
                                            onPress={() => openDetailPage(itemProps.item.resource)}
                                        >
                                            {({isPressed}) => {
                                                return <Box
                                                    borderWidth="1"
                                                    borderColor="muted.300"
                                                    borderRadius="20"
                                                    pl="4"
                                                    pr="2"
                                                    py="2"
                                                    mb="2"
                                                    style={{
                                                        width: "100%",
                                                        backgroundColor: isPressed ? "rgba(0, 0, 0, .05)" : "white",
                                                        transform: [{
                                                            scale: isPressed ? 0.98 : 1
                                                        }]
                                                    }}
                                                >
                                                    <HStack
                                                        space={[2, 3]}
                                                        justifyContent="space-between"
                                                    >
                                                        <VStack maxW="85%">
                                                            <Text
                                                                fontSize={17}
                                                                numberOfLines={1}
                                                                color="coolGray.900"
                                                                bold
                                                            >
                                                                {filterName(itemProps.item, 'name')}
                                                            </Text>
                                                            <Text
                                                                fontSize={16}
                                                                numberOfLines={1}
                                                                color="coolGray.800"
                                                            >
                                                                {filterName(itemProps.item, 'related')}
                                                            </Text>
                                                            {
                                                                sortByLocationEnabled && <Text
                                                                    fontSize={14}
                                                                    color="coolGray.400"
                                                                >
                                                                    {itemProps.item && itemProps.item.distance && itemProps.item.distance.toFixed(2) + ' miles'}
                                                                </Text>
                                                            }
                                                        </VStack>
                                                        <Spacer/>
                                                        <VStack justifyContent="center">
                                                            <Icon
                                                                size={6}
                                                                as={MaterialIcons}
                                                                name="arrow-forward-ios"
                                                                color="blue.500"
                                                            />
                                                        </VStack>
                                                    </HStack>
                                                </Box>;
                                            }}
                                        </Pressable>
                                        {
                                            (itemProps.index + 1 === searchResultDataLocal.length) && (
                                                loadMoreAvailable ? <Button
                                                    mt={.75}
                                                    mb={8}
                                                    isLoading={loadMoreLoading}
                                                    isLoadingText={t('loading')}
                                                    variant="subtle"
                                                    size="lg"
                                                    bgColor="yellow.400"
                                                    borderRadius="full"
                                                    _pressed={{
                                                        bgColor: "yellow.500"
                                                    }}
                                                    onPress={() => setPage(page + 1)}
                                                >{t('loadMore')}</Button> : <Box width="100%" height={35}/>
                                            )
                                        }
                                    </>;
                                }}
                            /> : <Center>{t('noResources')}</Center>
                        }
                    </Box>
                }
            </Box>
        </View>
    );
}
