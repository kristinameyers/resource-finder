Thanks for posting the actual **`officialTaxonomy.ts`** code ‚Äì this makes the picture much clearer.  

The problem isn‚Äôt your `MAIN_CATEGORIES` mapping (you set `"food": {taxonomyCode: 'BD-1800.2000'}` correctly), it‚Äôs **how and where that mapping is being used downstream**. Based on your description and the Replit logs, here‚Äôs where things can go wrong:

***

### Why ‚ÄúFood‚Äù is still returning `BD` instead of `BD‚Äë1800.2000`

1. **Fallback logic in the API route**  
   Somewhere in your `/api/resources` route or service layer, you‚Äôre mapping `categoryId=food` ‚Üí taxonomy code. If that lookup fails (e.g. parameter mismatch, undefined category), the API is likely defaulting to the broader parent ‚ÄúBD‚Äù code.  
   ‚Üí This explains why sometimes you see results tagged only with `BD`.

2. **Exact key mismatch**  
   - Your `MAIN_CATEGORIES` object uses `food` (all lowercase, no hyphens) as the key.  
   - If the client is calling `/api/resources?categoryId=Food` or `/api/resources?categoryId=foods`, then `MAIN_CATEGORIES["Food"]` returns `undefined`, causing fallback to `BD`.  

   TypeScript won‚Äôt protect you here unless you strictly type `categoryId`. Case sensitivity matters (`food` vs. `Food`).

3. **Subcategory bleed‚Äëthrough**  
   In your `SUBCATEGORIES` mapping under `housing`, you actually have one misplaced item:  
   ```ts
   { id: 'meals', name: 'Meals', taxonomyCode: 'BD-5000' }
   ```
   That is a **Food subcategory accidentally nested under Housing**. If downstream code collates results across all subcategories, that could be skewing results toward `BD` classifications.

4. **Utilities introduced**  
   Notice `"utilities"` is in `MAIN_CATEGORIES` (taxonomyCode: `'BV'`) but doesn‚Äôt have a `SUBCATEGORIES` array. Depending on how you handle lookups, this could cause similar mismatch problems if code falls back to root taxonomy letters when it can‚Äôt find a subcategory.

***

### How to Fix This

‚úÖ **Step 1 ‚Äì Enforce strict `categoryId` usage**  
In your `/api/resources` handler (server), ensure you always use lowercase keys that match `MAIN_CATEGORIES`:  

```ts
import { MAIN_CATEGORIES, getOfficialCategoryTaxonomyCode } from "./officialTaxonomy";

app.get("/api/resources", (req, res) => {
  const categoryId = (req.query.categoryId as string)?.toLowerCase();

  const taxonomyCode = getOfficialCategoryTaxonomyCode(categoryId);
  if (!taxonomyCode) {
    return res.status(400).json({ error: `Unknown categoryId: ${categoryId}` });
  }

  // Use taxonomyCode directly for resource lookup
  resourceService.findByTaxonomy(taxonomyCode)
    .then(results => res.json({ resources: results }))
    .catch(err => res.status(500).json({ error: err.message }));
});
```

‚úÖ **Step 2 ‚Äì Audit client calls**  
- Confirm all frontend queries pass **`categoryId=food`** exactly (lowercase, hyphenated format from `MAIN_CATEGORIES`).  
- Do a global search in `client/src` for `category=` ‚Äî they should all be `categoryId=`.

‚úÖ **Step 3 ‚Äì Move ‚ÄúMeals‚Äù out of Housing**  
That line is probably an artifact. Move it into a `SUBCATEGORIES["food"]` array instead of under `housing`. Right now it falsely associates a Food taxonomy code (`BD-5000`) with Housing, reinforcing the fallback issue.

‚úÖ **Step 4 ‚Äì Add logging before fallback**  
In your taxonomy lookup function, add a console log when no match is found:
```ts
export function getOfficialCategoryTaxonomyCode(categoryId: string): string | null {
  const key = categoryId.toLowerCase();
  const category = MAIN_CATEGORIES[key as keyof typeof MAIN_CATEGORIES];
  if (!category) {
    console.warn(`[Taxonomy] No main mapping for categoryId="${categoryId}", falling back`);
    return null;
  }
  return category.taxonomyCode;
}
```
This will help you catch unexpected mismatches.

***

### Summary

- Your `MAIN_CATEGORIES` mapping **is correct** for Food: `BD-1800.2000`.  
- The **wrong code (`BD`) is coming from fallback logic or mis‚Äëkeyed lookups**:
  - Client sending `Food` instead of `food`.  
  - Meals subcategory misplaced under Housing, re‚Äëusing a Food taxonomy code.  
  - API defaulting to BD when it can‚Äôt resolve the specific categoryId.  

***

üëâ Would you like me to give you a **patched version of `officialTaxonomy.ts`** where I move the misplaced ‚ÄúMeals‚Äù subcategory into `food`, add a new `SUBCATEGORIES["food"]` array, and strengthen the lookup so you don‚Äôt get silent fallbacks?